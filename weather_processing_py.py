# -*- coding: utf-8 -*-
"""weather_processing.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XgB5TwlOPTm557icicE4SK137FT5-f3D
"""

"""
Created on Mon Feb  7 14:10:42 2022
@author: Okhrimchuk Roman
for Sierentz Global Merchants
Test task
"""


# TODO Import the necessary libraries


# TODO Import the dataset 

path = r'./sample_data/weather_dataset.data'

# TODO  Assign it to a variable called data and replace the first 3 columns by a proper datetime index


# TODO Check if everything is okay with the data. Create functions to delete/fix rows with strange cases and apply them


# TODO Write a function in order to fix date (this relate only to the year info) and apply it


# TODO Set the right dates as the index. Pay attention at the data type, it should be datetime64[ns]


# TODO Compute how many values are missing for each location over the entire record


# TODO Compute how many non-missing values there are in total


# TODO Calculate the mean windspeeds of the windspeeds over all the locations and all the times


# TODO Create a DataFrame called loc_stats and calculate the min, max and mean windspeeds and standard deviations of the windspeeds at each location over all the days


# TODO Find the average windspeed in January for each location


# TODO Downsample the record to a yearly frequency for each location


# TODO Downsample the record to a monthly frequency for each location


# TODO Downsample the record to a weekly frequency for each location


# TODO Calculate the min, max and mean windspeeds and standard deviations of the windspeeds across all locations for each week (assume that the first week starts on January 2 1961) for the first 21 weeks

# TODO Import the necessary libraries
import pandas as pd
import numpy as np
import datetime


# TODO Import the dataset 

df = pd.read_csv(path, sep=r'\s+', skip_blank_lines=True, skipinitialspace=True)
df

# TODO  Assign it to a variable called data and replace the first 3 columns by a proper datetime index
df.head(3)

# TODO Check if everything is okay with the data. Create functions to delete/fix rows with strange cases and apply them
df.columns
ind=[]
for i in df.columns: 
  if 'loc' in i: #перебираем loc колонки
    for j in range(0,len(df[i])-1):
      if ',' in str(df[i][j]): # меняем запятую на точку в значениях 
        df[i][j]=df[i][j].replace(',', '.')
      try:
        if float(df[i][j])<0 or float(df[i][j])>100: # убираем отрицательные значения и значения выше 100
          ind.append(j)
      except: ind.append(j) # если не смогло преобразовать в float(всякие тестовые значения). Добавляем индексы на удаление
for i in ind:
  df.drop(labels = [i],axis = 0, inplace = True) #удаляем строки по индексам 
df.reset_index(drop=True, inplace=True)
df

#TODO Write a function in order to fix date (this relate only to the year info) and apply it
for i in range(0,len(df)):
  df['Yr'][i]='19'+str(df['Yr'][i])
df

# TODO Set the right dates as the index. Pay attention at the data type, it should be datetime64[ns]
df['date']=0
for i in range(0,len(df)):
  df['date'][i]=str(df['Dy'][i])+'/'+str(df['Mo'][i])+'/'+str(df['Yr'][i])
df['date'] =  pd.to_datetime(df['date'], format='%d/%m/%Y')
df.set_index(df["date"], inplace = True)
del df['date']
df

# TODO Compute how many values are missing for each location over the entire record
for i in df.columns:
  if 'loc' in i:
    print('Amount of missing values in '+i+'-'+str(len(df) - df[i].count()))

# TODO Compute how many non-missing values there are in total
for i in df.columns:
  if 'loc' in i:
    print('Amount of non-missing values in '+i+'-'+str(df[i].count()))

#Calculate the mean windspeeds of the windspeeds over all the locations and all the times
for i in df.columns:
  if 'loc' in i:
    df = df.astype({i: float})
    print('Mean windspeed in '+i+'- '+str(round(df[i].mean(),2)))

# TODO Create a DataFrame called loc_stats and calculate the min, max and mean windspeeds and standard deviations of the windspeeds at each location over all the days
loc_stats = pd.DataFrame()

for i in df.columns:
  if 'loc' in i:
    min = round(df[i].min(),2)
    max = round(df[i].max(),2)
    mean = round(df[i].mean(),2)
    std = round(df[i].std(),2)
    loc_stats[i] = [min, max, mean, std]
loc_stats.index = ['min','max','mean','std']
loc_stats

# TODO Find the average windspeed in January for each location
df_jan=df.loc[(df.index.month==1)] # делаем выборку, чтобы в нее попали только январь месяцы всех годов
for i in df_jan.columns:
  if 'loc' in i:
    print('Mean windspeed in January in '+i+'- '+str(round(df_jan[i].mean(),2)))

# TODO Downsample the record to a yearly frequency for each location
df_year=df.resample('Y').mean() #нахожу среднее по годам и по локациям
del df_year['Yr']  
del df_year['Mo'] 
del df_year['Dy']
df_year

# TODO Downsample the record to a monthly frequency for each location
df_month=df.resample('m').mean() #нахожу среднее по месяцам и по локациям
del df_month['Yr']  
del df_month['Mo'] 
del df_month['Dy']
df_month

# TODO Downsample the record to a weekly frequency for each location

df_week=df.resample('w').mean() #нахожу среднее по неделям и по локациям
del df_week['Yr']  
del df_week['Mo'] 
del df_week['Dy']
df_week

# TODO Calculate the min, max and mean windspeeds and standard deviations of the windspeeds across all locations for each week (assume that the first week starts on January 2 1961) for the first 21 weeks
weeks=21
week_offset=weeks*7
it=0
for i, row in df.iterrows():# тут создаем новый датасет(находим индексы начала и конца) по правилу ближайший понедельник к началу датасета+21 неделя
  if it==0:  
    s=i.weekday() # находим индекс дня недели
    of=7-s # находим сколько нужно добавить дней до ближайшего понедельника
    dt=i+ datetime.timedelta(days=of) # находим ближайший понедельник в формате datetime
  if i==dt: # находим в датасете ближайший понедельник и записываем его индекс в it переменную
    break # нашли, и дальше break
  it=it+1
df_new=df.iloc[it:week_offset+it] # создаем датасет по индексам
del df_new['Yr']  # удаляем ненужные поля
del df_new['Mo'] 
del df_new['Dy']
df_sd=df_new.resample('w').agg(['min','max', 'mean','std']) # делаем Downsample по неделям с необходимыми метриками
df_sd